

Why do they call it a relational database?
  - The database is called relational because objects have relations to each other. Ex. a Drive object might have a relation/associate to a Car.

What is SQL?
  - SQL is the language used to communicate with databases.

There are two predominant views into a relational database. What are they, and how are they different?
  - ? has many and belongs to
  - has many :through

In a table, what do we call the column that serves as the main identifier for a row of data? We're looking for the general database term, not the column name.
  - The primary key.

What is a foreign key, and how is it used?
  - The foreign key associates an object with another object. The foreign key identifies the object that is associated with the current object in a different table.

At a high level, describe the ActiveRecord pattern. This has nothing to do with Rails, but the actual pattern that ActiveRecord uses to perform its ORM duties.

If there's an ActiveRecord model called "CrazyMonkey", what should the table name be?
  - crazy_monkeys

If I'm building a 1:M association between Project and Issue, what will the model associations and foreign key be?
  - class Project
    has_many :issues
  - class Issue
    belongs_to :project # the table issues will have the foreign key.

Given this code

class Zoo < ActiveRecord::Base
has_many :animals
end

What do you expect the other model to be and what does database schema look like?
  - Animal
    belongs_to zoo

  - The database schema:
    - zoos
    - animals

What are the methods that are now available to a zoo to call related to animals?
  - animals.empty?
  - animals.size
  - animals
  -
  -

How do I create an animal called "jumpster" in a zoo called "San Diego Zoo"?

What is mass assignment? What's the non-mass assignment way of setting values?

What does this code do? Animal.first
  - This code returns the Animal object with id 1.

If I have a table called "animals" with columns called "name", and a model called Animal, how do I instantiate an animal object with name set to "Joe". Which methods makes sure it saves to the database?
  - Animal.new(name:'Joe')
  - To save, use: Animal.create(name:'Joe')

How does a M:M association work at the database level?
  - To generate an M:M, there must be a join table that exists between the two tables that share the M:M relationship.

What are the two ways to support a M:M association at the ActiveRecord model level? Pros and cons of each approach?
  - has many and belongs to
    - Pros: no need to a join table.
    - Cons: If you ever need to change anything in either table, it is a headache.

  - has many through
    - Pros: Not much
    - Cons: You need to generate a joine table, but that is not that expensive.

Suppose we have a User model and a Group model, and we have a M:M association all set up. How do we associate the two?
  - First, generate a table caleld user_groups. This table would belong to both user and group. Then, user and group each has_many of each other, through the user_groups table.
